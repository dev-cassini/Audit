// <auto-generated />
using System;
using Audit.Infrastructure.Persistence.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Audit.Infrastructure.Persistence.EntityFramework.Migrations
{
    [DbContext(typeof(Write.DbContext))]
    partial class DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Audit.Domain.Abstraction.Model.Audit.AuditRecordMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuditRecordId")
                        .HasColumnType("uuid")
                        .HasColumnName("PumpAuditRecordId");

                    b.Property<string>("OriginalValue")
                        .HasColumnType("text");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuditRecordId");

                    b.ToTable("PumpAuditRecordMetadata", (string)null);
                });

            modelBuilder.Entity("Audit.Domain.Model.Forecourt", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Forecourts", (string)null);
                });

            modelBuilder.Entity("Audit.Domain.Model.Lane", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ForecourtId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ForecourtId");

                    b.ToTable("Lanes", (string)null);
                });

            modelBuilder.Entity("Audit.Domain.Model.Pump", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LaneId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LaneId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Pumps", (string)null);
                });

            modelBuilder.Entity("Audit.Domain.Model.PumpAuditRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LaneId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PumpId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PumpId");

                    b.ToTable("PumpAuditRecords", (string)null);
                });

            modelBuilder.Entity("Audit.Domain.Model.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("FuelLevel")
                        .HasColumnType("integer");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TankCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", (string)null);
                });

            modelBuilder.Entity("Audit.Domain.Abstraction.Model.Audit.AuditRecordMetadata", b =>
                {
                    b.HasOne("Audit.Domain.Model.PumpAuditRecord", null)
                        .WithMany("Metadata")
                        .HasForeignKey("AuditRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Audit.Domain.Model.Lane", b =>
                {
                    b.HasOne("Audit.Domain.Model.Forecourt", null)
                        .WithMany("Lanes")
                        .HasForeignKey("ForecourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Audit.Domain.Model.Pump", b =>
                {
                    b.HasOne("Audit.Domain.Model.Lane", null)
                        .WithMany("Pumps")
                        .HasForeignKey("LaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Audit.Domain.Model.Vehicle", "Vehicle")
                        .WithOne()
                        .HasForeignKey("Audit.Domain.Model.Pump", "VehicleId");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Audit.Domain.Model.PumpAuditRecord", b =>
                {
                    b.HasOne("Audit.Domain.Model.Pump", null)
                        .WithMany("AuditRecords")
                        .HasForeignKey("PumpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Audit.Domain.Model.Forecourt", b =>
                {
                    b.Navigation("Lanes");
                });

            modelBuilder.Entity("Audit.Domain.Model.Lane", b =>
                {
                    b.Navigation("Pumps");
                });

            modelBuilder.Entity("Audit.Domain.Model.Pump", b =>
                {
                    b.Navigation("AuditRecords");
                });

            modelBuilder.Entity("Audit.Domain.Model.PumpAuditRecord", b =>
                {
                    b.Navigation("Metadata");
                });
#pragma warning restore 612, 618
        }
    }
}
