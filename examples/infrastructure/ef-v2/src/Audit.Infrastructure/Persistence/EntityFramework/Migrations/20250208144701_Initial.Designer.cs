// <auto-generated />
using System;
using Audit.Infrastructure.Persistence.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Audit.Infrastructure.Persistence.EntityFramework.Migrations
{
    [DbContext(typeof(AuditDbContext))]
    [Migration("20250208144701_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Audit.Domain.Model.AuditRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("TimestampUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AuditRecords", (string)null);
                });

            modelBuilder.Entity("Audit.Domain.Model.AuditRecordMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuditRecordId")
                        .HasColumnType("uuid");

                    b.Property<string>("OriginalValue")
                        .HasColumnType("text");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuditRecordId");

                    b.ToTable("AuditRecordMetadata", (string)null);
                });

            modelBuilder.Entity("Audit.Domain.Model.Forecourt", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Forecourts", (string)null);
                });

            modelBuilder.Entity("Audit.Domain.Model.Lane", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ForecourtId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ForecourtId");

                    b.ToTable("Lanes", (string)null);
                });

            modelBuilder.Entity("Audit.Domain.Model.Pump", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LaneId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LaneId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Pumps", (string)null);
                });

            modelBuilder.Entity("Audit.Domain.Model.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("FuelLevel")
                        .HasColumnType("integer");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TankCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", (string)null);
                });

            modelBuilder.Entity("Audit.Domain.Model.AuditRecord", b =>
                {
                    b.OwnsOne("Audit.Domain.ValueObjects.Actor", "Actor", b1 =>
                        {
                            b1.Property<Guid>("AuditRecordId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AuditRecordId");

                            b1.ToTable("AuditRecords");

                            b1.WithOwner()
                                .HasForeignKey("AuditRecordId");
                        });

                    b.Navigation("Actor")
                        .IsRequired();
                });

            modelBuilder.Entity("Audit.Domain.Model.AuditRecordMetadata", b =>
                {
                    b.HasOne("Audit.Domain.Model.AuditRecord", null)
                        .WithMany("Metadata")
                        .HasForeignKey("AuditRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Audit.Domain.Model.Lane", b =>
                {
                    b.HasOne("Audit.Domain.Model.Forecourt", null)
                        .WithMany("Lanes")
                        .HasForeignKey("ForecourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Audit.Domain.Model.Pump", b =>
                {
                    b.HasOne("Audit.Domain.Model.Lane", "Lane")
                        .WithMany("Pumps")
                        .HasForeignKey("LaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Audit.Domain.Model.Vehicle", "Vehicle")
                        .WithOne()
                        .HasForeignKey("Audit.Domain.Model.Pump", "VehicleId");

                    b.Navigation("Lane");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Audit.Domain.Model.AuditRecord", b =>
                {
                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Audit.Domain.Model.Forecourt", b =>
                {
                    b.Navigation("Lanes");
                });

            modelBuilder.Entity("Audit.Domain.Model.Lane", b =>
                {
                    b.Navigation("Pumps");
                });
#pragma warning restore 612, 618
        }
    }
}
